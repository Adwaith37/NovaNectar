# -*- coding: utf-8 -*-
"""AirIndia Price Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HtpD2wTyuIzP-WhtJD7q7wabiNOAhKS3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.ensemble import RandomForestClassifier, StackingClassifier
from lightgbm import LGBMClassifier
import xgboost as xgb
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from lightgbm import LGBMRegressor
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import classification_report, accuracy_score, f1_score

df = pd.read_csv('AirIndia_Price_Dataset.csv')
df.head()

print(df.info())

null_counts = df.isnull().sum()
null_percentage = (null_counts / len(df)) * 100
null_summary = pd.DataFrame({
    'Null Count': null_counts,
    'Null Percentage': null_percentage
}).sort_values(by='Null Percentage', ascending=False)

print("\n Null Summary:")
print(null_summary)

df = df.dropna()
df['Date_of_Journey'] = pd.to_datetime(df['Date_of_Journey'], dayfirst=True)
df['Day'] = df['Date_of_Journey'].dt.day
df['Month'] = df['Date_of_Journey'].dt.month
df['Year'] = df['Date_of_Journey'].dt.year
df = df.sort_values(by='Date_of_Journey').reset_index(drop=True)

df['Revenue'] = df['Price'] * df['Tickets_Sold']

# Set plot styles
sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 6)

# COMMERCIAL ANALYSIS

# Top 10 Routes by Total Revenue
top_routes_revenue = (df.groupby('Route')['Revenue'].sum().sort_values(ascending=False).head(10))

plt.figure()
sns.barplot(x=top_routes_revenue.values, y=top_routes_revenue.index, palette="magma")
plt.title("Top 10 Routes by Revenue")
plt.xlabel("Total Revenue")
plt.ylabel("Route")
plt.tight_layout()
plt.show()

#Private Analysis

top_routes = df.groupby('Route')['Tickets_Sold'].sum().sort_values(ascending=False).head(10)

# Set style and size
plt.figure(figsize=(14, 8))
sns.set(style="whitegrid")

# Plot
sns.barplot(x=top_routes.values, y=top_routes.index, palette='cividis')
plt.title('Top 10 Routes by Customer Engagement', fontsize=16)
plt.xlabel('Total Tickets Sold', fontsize=12)
plt.ylabel('Route', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

plt.tight_layout()
plt.show()

# YOY Analysis
yoy_data = df.groupby('Year')[['Tickets_Sold', 'Revenue']].sum().reset_index()

plt.figure(figsize=(14, 6))

# YOY - Tickets Sold
plt.subplot(1, 2, 1)
sns.barplot(data=yoy_data, x='Year', y='Tickets_Sold', palette='pastel')
plt.title("YOY - Yearly Tickets Sold", fontsize=13)
plt.xlabel("Year")
plt.ylabel("Tickets Sold")

# YOY - Revenue
plt.subplot(1, 2, 2)
sns.barplot(data=yoy_data, x='Year', y='Revenue', palette='muted')
plt.title("YOY - Yearly Revenue", fontsize=13)
plt.xlabel("Year")
plt.ylabel("Revenue")

plt.tight_layout()
plt.show()

# MOM Analysis
mom_data = df.groupby(['Year', 'Month'])[['Tickets_Sold', 'Revenue']].sum().reset_index()
available_months = sorted(df['Month'].unique())

plt.figure(figsize=(16, 6))

# MOM - Tickets Sold
plt.subplot(1, 2, 1)
sns.lineplot(data=mom_data, x='Month', y='Tickets_Sold', hue='Year', marker='o', palette='coolwarm')
plt.title("MOM - Monthly Tickets Sold", fontsize=13)
plt.xlabel("Month")
plt.ylabel("Tickets Sold")
plt.xticks(available_months)

# MOM - Revenue
plt.subplot(1, 2, 2)
sns.lineplot(data=mom_data, x='Month', y='Revenue', hue='Year', marker='o', palette='tab10')
plt.title("MOM - Monthly Revenue", fontsize=13)
plt.xlabel("Month")
plt.ylabel("Revenue")
plt.xticks(available_months)

plt.tight_layout()
plt.show()

rating_counts = df['Rating'].value_counts().sort_index()

# Pie chart
plt.figure(figsize=(7, 7))
plt.pie(
    rating_counts,
    labels=[f"{star} Stars" for star in rating_counts.index],
    autopct='%1.1f%%',
    startangle=140,
    colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'],  # Custom bold colors
    wedgeprops={'edgecolor': 'black'}
)

plt.title("Distribution of Customer Ratings", fontsize=14)
plt.axis('equal')  # Ensures pie is a circle
plt.show()

# YOY Grouping
yoy_tickets = df.groupby('Year')['Tickets_Sold'].sum().reset_index()

# MOM Grouping
mom_tickets = df.groupby(['Month', 'Year'])['Tickets_Sold'].sum().reset_index()

# Bright color palette for 3 years
palette = sns.color_palette("bright", len(yoy_tickets['Year'].unique()))

plt.figure(figsize=(14, 6))

# YOY Plot (simple barplot)
plt.subplot(1, 2, 1)
sns.barplot(data=yoy_tickets, x='Year', y='Tickets_Sold', palette=palette)
plt.title("YOY Customer Engagement (Tickets Sold)")
plt.xlabel("Year")
plt.ylabel("Tickets Sold")

# MOM Plot (grouped barplot with hue)
plt.subplot(1, 2, 2)
sns.barplot(data=mom_tickets, x='Month', y='Tickets_Sold', hue='Year', palette=palette)
plt.title("MOM Customer Engagement (Tickets Sold)")
plt.xlabel("Month")
plt.ylabel("Tickets Sold")
plt.legend(title="Year")

plt.tight_layout()
plt.show()

# Encode categorical columns
le = LabelEncoder()
for col in df.select_dtypes(include='object').columns:
    df[col] = le.fit_transform(df[col])

# Features and target
X = df.drop('Price', axis=1)
y = df['Price']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest Regressor
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
rf_preds = rf_model.predict(X_test)

# Evaluation
r2 = r2_score(y_test, rf_preds)
rmse = np.sqrt(mean_squared_error(y_test, rf_preds))

print(f"R2 Score: {r2 * 100:.2f}%")
print(f"RMSE: {rmse:.2f}")

rf_residuals = y_test - rf_preds

# Histogram of Residuals
plt.figure(figsize=(10, 5))
sns.histplot(rf_residuals, kde=True, bins=30)
plt.title("Distribution of Residuals (Random Forest)")
plt.xlabel("Residuals")
plt.show()

# XGBoost Model
model = xgb.XGBRegressor(random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation Metrics
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

xgb_residuals = y_test - y_pred

print(f"R2 Score: {r2 * 100:.2f}%")
print(f"RMSE: {rmse:.2f}")

# Histogram of Residuals
plt.figure(figsize=(8, 4))
sns.histplot(xgb_residuals, kde=True, bins=30)
plt.title("Distribution of Residuals (XGBoost)")
plt.xlabel("Residuals")
plt.show()